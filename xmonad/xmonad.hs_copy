import XMonad

import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP

import XMonad.Util.EZConfig
import XMonad.Util.Loggers
import XMonad.Util.Ungrab

import XMonad.Layout.Magnifier
import XMonad.Layout.ThreeColumns
import XMonad.Layout.Spacing

import XMonad.Hooks.EwmhDesktops
import qualified XMonad.StackSet as W
import XMonad.Util.NamedScratchpad
import XMonad.Layout.IndependentScreens (marshallPP)

grey1, grey2, grey3, grey4, cyan, orange :: String
grey1  = "#2B2E37"
grey2  = "#555E70"
grey3  = "#697180"
grey4  = "#8691A8"
cyan   = "#8BABF0"
orange = "#C45500"



main :: IO ()
main =
       xmonad
     . ewmhFullscreen
     . ewmh
     . dynamicSBs myStatusBarSpawner
     $ myConfig

myConfig = def
    { modMask    = mod4Mask      -- Rebind Mod to the Super key
    , layoutHook = myLayout      -- Use custom layouts
    , manageHook = myManageHook  -- Match on certain windows
    , startupHook = myStartupHook
    , terminal = "kitty" 
    }
  `additionalKeysP`
    [ ("M-f"  , spawn "firefox"                   )
    ]

myManageHook = composeAll
    [ className =? "Gimp" --> doFloat
    , isDialog            --> doFloat
    ]

myLayout = spacing 40 $ tiled ||| Mirror tiled ||| Full ||| threeCol
  where
    threeCol = magnifiercz' 1.3 $ ThreeColMid nmaster delta ratio
    tiled    = Tall nmaster delta ratio
    nmaster  = 1      -- Default number of windows in the master pane
    ratio    = 1/2    -- Default proportion of screen occupied by master pane
    delta    = 3/100  -- Percent of screen to increment by when resizing panes

myStartupHook :: X ()
myStartupHook = do
   spawn "killall feh; feh --bg-fill --no-fehbg ~/Pictures/wallpapers/wp4676582-4k-pc-wallpapers.jpg &"
   spawn "killall trayer; sleep 2 && trayer --edge top --align right --widthtype request --padding 7 --iconspacing 10 --SetDockType true --SetPartialStrut true --expand true --transparent true --alpha 0 --tint 0x5f5f5f  --height 29 --distance 5 &"

myStatusBarSpawner :: Applicative f => ScreenId -> f StatusBarConfig
myStatusBarSpawner (S s) = do
                    pure $ statusBarPropTo ("_XMONAD_LOG_" ++ show s)
                          ("xmobar -x " ++ show s ++ " ~/.config/xmonad/xmobar/xmobar" ++ show s ++ ".hs")
                          (pure $ myXmobarPP (S s))

myXmobarPP :: ScreenId -> PP
myXmobarPP s  = filterOutWsPP [scratchpadWorkspaceTag] . marshallPP s $ def
  { ppSep = ""
  , ppWsSep = ""
  , ppCurrent = xmobarColor cyan ""
  , ppVisible = xmobarColor grey4 ""
  , ppVisibleNoWindows = Just (xmobarColor grey4 "")
  , ppHidden = xmobarColor grey2 ""
  , ppHiddenNoWindows = xmobarColor grey2 ""
  , ppUrgent = xmobarColor orange ""
  , ppOrder = \(ws : _ : _ : extras) -> ws : extras
  , ppExtras  = [ titleColorIsActive s (shortenL 81 $ logTitleOnScreen s)
                ]
  }
  where
    wsIconFull   = "  <fn=2>\xf111</fn>   "
    wsIconHidden = "  <fn=2>\xf111</fn>   "
    wsIconEmpty  = "  <fn=2>\xf10c</fn>   "
    titleColorIsActive n l = do
      c <- withWindowSet $ return . W.screen . W.current
      if n == c then xmobarColorL cyan "" l else xmobarColorL grey3 "" l
    layoutColorIsActive n l = do
      c <- withWindowSet $ return . W.screen . W.current
      if n == c then wrapL "<icon=/home/shaggy/.config/xmonad/xmobar/icons/" "_selected.xpm/>" l else wrapL "<icon=/home/shaggy/.config/xmonad/xmobar/icons/" ".xpm/>" l
